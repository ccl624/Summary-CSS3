HTML CSS JavaScript
    - 结构 表现 行为

JavaScript
    - 学习JS主要学习了三个内容：
        ECMAScript DOM BOM
            - ECMAScript JS的标准

            - DOM
                - Document Object Model
                - 文档对象模型

            - BOM 浏览器对象模型

    - ECMAScript
        - 数据类型
            - 基本数据类型
                - 基本数据类型在变量中直接保存值，值与值之间是相互独立的，
                    修改一个值不会影响另一个
                String
                Number
                Boolean
                Null
                Undefined

                //表示一个人的信息
                var name = "sunwukong";
                var age = 18;
                var gender = "男";

            - 引用数据类型
                - 引用数据类型在变量中是保存的对象的内存地址（引用），
                    如果两个变量指向的是同一个对象，则修改一个会影响另一个
                Object

            - 检查值是什么数据类型？
                - 使用typeof运算符来间检查一个值的类型
                - typeof可能返回的结果：
                    string
                        - 字符串
                    number
                        - 数值
                    boolean
                        - 布尔值
                    undefined
                        - 未定义
                    object
                        - 对象或null
                    function
                        - 函数

            - 类型转换
                - 转换为String
                    - 强制类型转换
                        1. 调用toString()方法
                            - 不适用于null和undefined如果对这两个值调用会报错
                            - 当我们对基本数据类型的String Number Boolean调用方法或属性时，
                                JS解析器会临时使用包装类将其转换为对象，然后调用对象的属性或方法，
                                调用完毕在将对象销毁
                            - 将基本数据类型转换为对象，称为装箱
                                将对象转换为基本数据类型，称为拆箱

                        2. 调用String()函数

                    - 隐式类型转换
                        + ""

                - 转换为Number
                    - 强制类型转换
                        - 调用Number()函数
                        - 专门用来对付字符串的
                            parseInt()
                            parseFloat()

                    - 隐式类型转换
                        - 使用一元的 +

                - 转换为Boolean
                    - 强制类型转换
                        - 调用Boolean()函数
                        - 转换的情况：
                            数字：
                                - 除了0和NaN其余的都是true

                            字符串：
                                - 除了空串其余的都是true

                            null和undefined都是false

                            对象默认情况下都是true

                    - 隐式类型转换
                        - 使用 !!

                - 逻辑运算符
                    && 与运算
                        - 与运算是找false的，只要有一个false就返回false

                        1 && 2
                        0 && 2
                        - 如果第一个值是false，则返回第一个值，否则返回第二个值

                        event = event || window.event;


                    || 或运算
                        - 或运算是找true的，只要一个true就返回true

                        1 || 2
                        0 || 2
                        - 如果第一个值是true，则返回第一个值，否则返回第二值

            - 相等和全等
                 ==
                    相等会做自动的类型转换
                    - 大部分情况下都是将不同的数据类型转换为Number然后再比较
                 ===
                    不会自动类型转换

                 1 == "1" //true
                 1 === "1" //false

                 "1" == true //true

                 "hello" == true; //false

                 null == 0;

        - 原型（prototype）
        - 函数 (Function)
            - 函数也是一个对象，对象能做的事函数都能做，但是函数的功能要比普通对象要强大（函数是JS中一等公民）
            - 函数中可以保存可执行的代码，并且可以在需要的时候反复进调用
            - 以function开头的是函数声明会被提升
            - 创建函数：
                1.函数声明(会被提升)
                    function 函数名(形参){
                        //函数体
                    }

                2.函数表达式（不会提升）
                    var 函数名 = function(形参){
                        //函数体
                    };

                立即执行函数表达式
                (function(){}());

            - 函数中隐含的参数：
                 - 函数在调用时，解析器会传递进两个隐含的参数：
                    this
                        - this是函数执行的上下文对象
                        - 根据函数的调用方式不同，this的值也不同
                            1.以函数的形式调用时，this是window
                            2.以方法的形式调用时，this是调用方法的对象
                            3.以构造函数的形式调用时，this是新创建的对象
                            4.以call()和apply()调用时，this是方法中第一个参数

                    arguments
                        - arguments是实参对象，函数在调用时的实参都在该对象中封装
                        - arguments是一个类数组（伪数组）对象
                        - 通过arguments即使不定义形参，也可以使用实参

            - 函数的形参和实参
                 - 形参（形式参数）：
                      - 在定义函数时可以在函数中指定数量不等的形参，
                            定义形参就相当于在函数声明了一个变量，但是并没有赋值
                 - 实参（实际参数）：
                      - 在调用函数时可以向函数中传递实参，实参会赋值给对应的形参

                 function fn1(a , b){
                    var a , b;
                 }

                 fn1(123,456);

